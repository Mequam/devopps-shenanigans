AWSTemplateFormatVersion: 2010-09-09

Parameters:
  InstanceType:
    Description: web server EC2 Instance Type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium

  DBName:
    Description: name of the database that the server runs on
    Type: String
    AllowedPattern: '[a-zA-Z]+'

  DBUsername:
    Description: Primary user of the database
    Type: String
    AllowedPattern: '[a-zA-Z]+'
  
  DBPassword:
    Description: Password to access the database
    Type: String
  
  DBPort:
    Description: Database Port Number
    Type: String
    AllowedPattern: "[0-9]*"
  
  ServerAllowedHosts:
    Description: regex of hosts that the server is allowed to respond to
    Type: String

  VPCCidr:
    Description: vpc Cider ip range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PublicSubnetCidr:
    Description: Public Subnet ipv4 address range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


  PublicSubnetCidr2:
    Description: Public Subnet ipv4 address range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


  PrivateDBSubnetCidr:
    Description: Private Subnet ipv4 for db cluster
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


  PrivateSubnetCidr:
    Description: Private Subnet ipv4 address range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  AvailabilityZone1:
    Description: Primary availability zone, used for public and one private subnet
    Type: String

  AvailabilityZone2:
    Description: AZ used for the db cluster to provide constistancy
    Type: String


Resources:
  AngularVoteApp:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref AngularVoteApp
                - /*
      Bucket: !Ref AngularVoteApp

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: false
      EnableDnsSupport: true
      Tags:
        - Key: "BatchID"
          Value: "DevOps"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "BatchID"
          Value: "DevOps"

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubNet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnetCidr
      VpcId: !Ref VPC
      Tags:
        - Key: "BatchID"
          Value: "DevOps"
  
  PublicSubNet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnetCidr2
      VpcId: !Ref VPC
      Tags:
        - Key: "BatchID"
          Value: "DevOps"


  PrivateSubNet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PrivateSubnetCidr
      VpcId: !Ref VPC
      Tags:
        - Key: "BatchID"
          Value: "DevOps"


  PrivateSubNet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PrivateDBSubnetCidr
      VpcId: !Ref VPC
      Tags:
        - Key: "BatchID"
          Value: "DevOps"
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: "BatchID"
          Value: "DevOps"
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubNet
      RouteTableId: !Ref PublicRouteTable


  PublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubNet2
      RouteTableId: !Ref PublicRouteTable

  DBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: subnet group for postgres db
      SubnetIds: 
        - !Ref PrivateSubNet2
        - !Ref PrivateSubNet1
      Tags: 
        - Key: "BatchID"
          Value: "DevOps"
  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group For Web Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
      
      #http protocol
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      
      #ssh protocol
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      
      #DNS protocols
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      
      # database port
      - IpProtocol: tcp
        FromPort: !Ref DBPort
        ToPort: !Ref DBPort
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        #http protocol
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        #dns protocol
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
        
        #dns protocol
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0


      # database port
      - IpProtocol: tcp
        FromPort: !Ref DBPort
        ToPort: !Ref DBPort
        CidrIp: 0.0.0.0/0
      
      # yum needs this to download and startup
      # TODO: we could probably limit this to specific server
      # ip's if we new the webservers that yum uses
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  #let any host from the given subnet talk to us
  SecurityGroupDatabase:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'vote-app-aurora-database-sg'
      GroupName: 'vote-app-aurora-database-sg'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref PrivateSubnetCidr
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
        - IpProtocol: tcp
          CidrIp: !Ref PrivateDBSubnetCidr
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
        - IpProtocol: tcp
          CidrIp: !Ref PublicSubnetCidr
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
        - IpProtocol: tcp
          CidrIp: !Ref PublicSubnetCidr2
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'

  AuroraDBCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      DBClusterIdentifier: 'vote-app-postgres-db'
      DatabaseName: !Ref DBName
      DBSubnetGroupName: !Ref DBSubnetGroup
      #DBClusterParameterGroupName: !Ref AuroraPostgresParameterGroup
      DeletionProtection: false
      Engine: 'aurora-postgresql'
      EngineMode: 'provisioned'
      EngineVersion: "16.6"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Port: !Ref DBPort
      StorageEncrypted: false
      VpcSecurityGroupIds:
        - !Ref SecurityGroupDatabase

  WriterInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: 'aurora-postgresql'
      DBClusterIdentifier: !Ref AuroraDBCluster
      DBInstanceClass: 'db.r5.large'
      AllowMajorVersionUpgrade: false
      EnablePerformanceInsights: false
      PubliclyAccessible: false

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: !Ref DBPort
        ToPort: !Ref DBPort
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: !Ref DBPort
        ToPort: !Ref DBPort
        CidrIp: 0.0.0.0/0


  WebServerLoadBalancer:
    DependsOn: WriterInstance
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubNet
        - !Ref PublicSubNet2
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId
      Tags:
        - Key: "BatchID"
          Value: "DevOps"



  WebServerLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref WebServerLoadBalancer
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: "BatchID"
          Value: "DevOps"


  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: WebServerTargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      VpcId: !Ref VPC
      Tags:
        - Key: "BatchID"
          Value: "DevOps"



  VoteAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        # Amazon Linux, taken from the AWS dashboard ui when creating an ec2 instance
        ImageId: ami-09115b7bffbe3c5e4
        InstanceType: !Ref InstanceType
        KeyName: dak-test-key
        SecurityGroupIds: 
          - !Ref WebServerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker
            systemctl start docker
            usermod -a -G docker ec2-user
            sudo -u ec2-user docker run -p 80:8000 -d \
              -e VOTE_NAME=${DBName} \
              -e VOTE_USER=${DBUsername} \
              -e VOTE_PASSWORD=${DBPassword} \
              -e VOTE_HOST=${AuroraDBCluster.Endpoint.Address} \
              -e VOTE_PORT=${DBPort} \
              -e ALLOWED_HOST=${ServerAllowedHosts} \
              mequam/django-vote-pipeline:latest
        TagSpecifications:
          - ResourceType: "instance"
            Tags:
              - Key: "BatchID"
                Value: "DevOps"


  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: WriterInstance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref VoteAppLaunchTemplate
        Version: !GetAtt VoteAppLaunchTemplate.LatestVersionNumber
      MaxSize: '2'
      MinSize: '1'
      TargetGroupARNs:
        - !Ref WebServerTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubNet
        - !Ref PublicSubNet2
      Tags:
        - Key: "BatchID"
          Value: "DevOps"
          PropagateAtLaunch: True

#NAT gateway and routes
  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubNet
      Tags:
      - Key: stack
        Value: production

  NATGatewayEIP:
     Type: AWS::EC2::EIP
     Properties:
        Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: "BatchID"
          Value: "DevOps"
      VpcId: !Ref VPC

  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubNet1
      RouteTableId: !Ref PrivateRouteTable

  RouteNATGateway:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway


Outputs:
  WebsiteURL:
    Value: !GetAtt 
      - AngularVoteApp
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - AngularVoteApp
          - DomainName
    Description: Name of S3 bucket to hold website content
